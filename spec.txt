MIT License

Copyright (c) 2023 Hiro

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 
===========================================================================================================================================================

Goal of VFS:
Create a filesystem on top of another filesystem.

The Virtual Storage Drive (VSD):
An unstructured empty file with reserved space on a mounted "real" file system. It serves as an emulation of a storage device.

The VSD driver:
A piece of code that interfaces directly with the VSD. Middleware between VFS and VSD.

The Virtual File System (VFS):
The actual code that initializes/manages the VSD volume.

The User Interface (UI):
A Unix-like command line interface. It allows at least READ,WRITE,DELETE,MOVE operations.

VFS has atleast the concept of both files and directories.

===========================================================================================================================================================
VSD DRIVER

The driver reads in 1 block per read, this implies that a memory buffer needs to be maintained with a size that is atleast equal to VSD block size.
The VSD block size is assumed to be 1024 bytes.

READING BLOCKS
void	read_block_to_buffer(unsigned int block_index)
reads a full block as instructed via the block_index argument (0 indexed) into a central buffer.

WRITING TO BLOCKS
void	write_to_block(int block_index, int offset, char *buf, int size)
writes to a block in the VSD.

RETURNING VSD SIZE
off_t	return_vsd_size()
returns the vsd size in bytes.

RETURNING BLOCK DATA
char					*return_buffer();
returns the central buffer.

DRIVER STATUS INFORMATION
struct driver_status	return_driver_status();
returns the latest driver status.


===========================================================================================================================================================

===========================================================================================================================================================